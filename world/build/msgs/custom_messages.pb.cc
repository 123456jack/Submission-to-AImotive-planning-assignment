// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: custom_messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "custom_messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace custom_messages {

namespace {

const ::google::protobuf::Descriptor* VehicleState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleState_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* Statistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Statistics_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_custom_5fmessages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_custom_5fmessages_2eproto() {
  protobuf_AddDesc_custom_5fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "custom_messages.proto");
  GOOGLE_CHECK(file != NULL);
  VehicleState_descriptor_ = file->message_type(0);
  static const int VehicleState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, vehicle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, lane_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, velocity_),
  };
  VehicleState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleState_descriptor_,
      VehicleState::default_instance_,
      VehicleState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, _has_bits_[0]),
      -1,
      -1,
      sizeof(VehicleState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleState, _internal_metadata_),
      -1);
  WorldState_descriptor_ = file->message_type(1);
  static const int WorldState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldState, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldState, simulation_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldState, ego_vehicle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldState, vehicles_),
  };
  WorldState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorldState_descriptor_,
      WorldState::default_instance_,
      WorldState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldState, _has_bits_[0]),
      -1,
      -1,
      sizeof(WorldState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldState, _internal_metadata_),
      -1);
  Command_descriptor_ = file->message_type(2);
  static const int Command_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, simulation_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, ego_car_speed_),
  };
  Command_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      -1,
      -1,
      sizeof(Command),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _internal_metadata_),
      -1);
  Statistics_descriptor_ = file->message_type(3);
  static const int Statistics_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistics, total_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistics, simulation_time_steps_taken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistics, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistics, collision_detected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistics, limits_respected_),
  };
  Statistics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Statistics_descriptor_,
      Statistics::default_instance_,
      Statistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistics, _has_bits_[0]),
      -1,
      -1,
      sizeof(Statistics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistics, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_custom_5fmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleState_descriptor_, &VehicleState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorldState_descriptor_, &WorldState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Statistics_descriptor_, &Statistics::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_custom_5fmessages_2eproto() {
  delete VehicleState::default_instance_;
  delete VehicleState_reflection_;
  delete WorldState::default_instance_;
  delete WorldState_reflection_;
  delete Command::default_instance_;
  delete Command_reflection_;
  delete Statistics::default_instance_;
  delete Statistics_reflection_;
}

void protobuf_AddDesc_custom_5fmessages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_custom_5fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_time_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_vector2d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025custom_messages.proto\022\017custom_messages"
    "\032\ntime.proto\032\016vector2d.proto\"\205\001\n\014Vehicle"
    "State\022\022\n\nvehicle_id\030\001 \002(\005\022\017\n\007lane_id\030\002 \002"
    "(\005\022\'\n\010position\030\003 \002(\0132\025.gazebo.msgs.Vecto"
    "r2d\022\'\n\010velocity\030\004 \002(\0132\025.gazebo.msgs.Vect"
    "or2d\"\254\001\n\nWorldState\022\037\n\004time\030\001 \002(\0132\021.gaze"
    "bo.msgs.Time\022\030\n\020simulation_round\030\002 \002(\005\0222"
    "\n\013ego_vehicle\030\003 \002(\0132\035.custom_messages.Ve"
    "hicleState\022/\n\010vehicles\030\004 \003(\0132\035.custom_me"
    "ssages.VehicleState\":\n\007Command\022\030\n\020simula"
    "tion_round\030\001 \002(\005\022\025\n\rego_car_speed\030\002 \002(\001\""
    "\224\001\n\nStatistics\022\032\n\022total_acceleration\030\001 \002"
    "(\001\022#\n\033simulation_time_steps_taken\030\002 \002(\005\022"
    "\017\n\007success\030\003 \002(\010\022\032\n\022collision_detected\030\004"
    " \002(\010\022\030\n\020limits_respected\030\005 \002(\010", 590);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "custom_messages.proto", &protobuf_RegisterTypes);
  VehicleState::default_instance_ = new VehicleState();
  WorldState::default_instance_ = new WorldState();
  Command::default_instance_ = new Command();
  Statistics::default_instance_ = new Statistics();
  VehicleState::default_instance_->InitAsDefaultInstance();
  WorldState::default_instance_->InitAsDefaultInstance();
  Command::default_instance_->InitAsDefaultInstance();
  Statistics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_custom_5fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_custom_5fmessages_2eproto {
  StaticDescriptorInitializer_custom_5fmessages_2eproto() {
    protobuf_AddDesc_custom_5fmessages_2eproto();
  }
} static_descriptor_initializer_custom_5fmessages_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleState::kVehicleIdFieldNumber;
const int VehicleState::kLaneIdFieldNumber;
const int VehicleState::kPositionFieldNumber;
const int VehicleState::kVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleState::VehicleState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:custom_messages.VehicleState)
}

void VehicleState::InitAsDefaultInstance() {
  position_ = const_cast< ::gazebo::msgs::Vector2d*>(&::gazebo::msgs::Vector2d::default_instance());
  velocity_ = const_cast< ::gazebo::msgs::Vector2d*>(&::gazebo::msgs::Vector2d::default_instance());
}

VehicleState::VehicleState(const VehicleState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:custom_messages.VehicleState)
}

void VehicleState::SharedCtor() {
  _cached_size_ = 0;
  vehicle_id_ = 0;
  lane_id_ = 0;
  position_ = NULL;
  velocity_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleState::~VehicleState() {
  // @@protoc_insertion_point(destructor:custom_messages.VehicleState)
  SharedDtor();
}

void VehicleState::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete velocity_;
  }
}

void VehicleState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleState_descriptor_;
}

const VehicleState& VehicleState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_custom_5fmessages_2eproto();
  return *default_instance_;
}

VehicleState* VehicleState::default_instance_ = NULL;

VehicleState* VehicleState::New(::google::protobuf::Arena* arena) const {
  VehicleState* n = new VehicleState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleState::Clear() {
// @@protoc_insertion_point(message_clear_start:custom_messages.VehicleState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VehicleState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VehicleState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(vehicle_id_, lane_id_);
    if (has_position()) {
      if (position_ != NULL) position_->::gazebo::msgs::Vector2d::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::gazebo::msgs::Vector2d::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VehicleState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:custom_messages.VehicleState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vehicle_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vehicle_id_)));
          set_has_vehicle_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lane_id;
        break;
      }

      // required int32 lane_id = 2;
      case 2: {
        if (tag == 16) {
         parse_lane_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_id_)));
          set_has_lane_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // required .gazebo.msgs.Vector2d position = 3;
      case 3: {
        if (tag == 26) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_velocity;
        break;
      }

      // required .gazebo.msgs.Vector2d velocity = 4;
      case 4: {
        if (tag == 34) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:custom_messages.VehicleState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:custom_messages.VehicleState)
  return false;
#undef DO_
}

void VehicleState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:custom_messages.VehicleState)
  // required int32 vehicle_id = 1;
  if (has_vehicle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vehicle_id(), output);
  }

  // required int32 lane_id = 2;
  if (has_lane_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lane_id(), output);
  }

  // required .gazebo.msgs.Vector2d position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->position_, output);
  }

  // required .gazebo.msgs.Vector2d velocity = 4;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->velocity_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:custom_messages.VehicleState)
}

::google::protobuf::uint8* VehicleState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:custom_messages.VehicleState)
  // required int32 vehicle_id = 1;
  if (has_vehicle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vehicle_id(), target);
  }

  // required int32 lane_id = 2;
  if (has_lane_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lane_id(), target);
  }

  // required .gazebo.msgs.Vector2d position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->position_, false, target);
  }

  // required .gazebo.msgs.Vector2d velocity = 4;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->velocity_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:custom_messages.VehicleState)
  return target;
}

int VehicleState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:custom_messages.VehicleState)
  int total_size = 0;

  if (has_vehicle_id()) {
    // required int32 vehicle_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vehicle_id());
  }

  if (has_lane_id()) {
    // required int32 lane_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_id());
  }

  if (has_position()) {
    // required .gazebo.msgs.Vector2d position = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  if (has_velocity()) {
    // required .gazebo.msgs.Vector2d velocity = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->velocity_);
  }

  return total_size;
}
int VehicleState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:custom_messages.VehicleState)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 vehicle_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vehicle_id());

    // required int32 lane_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_id());

    // required .gazebo.msgs.Vector2d position = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);

    // required .gazebo.msgs.Vector2d velocity = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->velocity_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:custom_messages.VehicleState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VehicleState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:custom_messages.VehicleState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:custom_messages.VehicleState)
    MergeFrom(*source);
  }
}

void VehicleState::MergeFrom(const VehicleState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:custom_messages.VehicleState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vehicle_id()) {
      set_vehicle_id(from.vehicle_id());
    }
    if (from.has_lane_id()) {
      set_lane_id(from.lane_id());
    }
    if (from.has_position()) {
      mutable_position()->::gazebo::msgs::Vector2d::MergeFrom(from.position());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::gazebo::msgs::Vector2d::MergeFrom(from.velocity());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VehicleState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:custom_messages.VehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleState::CopyFrom(const VehicleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:custom_messages.VehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_position()) {
    if (!this->position_->IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity_->IsInitialized()) return false;
  }
  return true;
}

void VehicleState::Swap(VehicleState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleState::InternalSwap(VehicleState* other) {
  std::swap(vehicle_id_, other->vehicle_id_);
  std::swap(lane_id_, other->lane_id_);
  std::swap(position_, other->position_);
  std::swap(velocity_, other->velocity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleState_descriptor_;
  metadata.reflection = VehicleState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleState

// required int32 vehicle_id = 1;
bool VehicleState::has_vehicle_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleState::set_has_vehicle_id() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleState::clear_has_vehicle_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleState::clear_vehicle_id() {
  vehicle_id_ = 0;
  clear_has_vehicle_id();
}
 ::google::protobuf::int32 VehicleState::vehicle_id() const {
  // @@protoc_insertion_point(field_get:custom_messages.VehicleState.vehicle_id)
  return vehicle_id_;
}
 void VehicleState::set_vehicle_id(::google::protobuf::int32 value) {
  set_has_vehicle_id();
  vehicle_id_ = value;
  // @@protoc_insertion_point(field_set:custom_messages.VehicleState.vehicle_id)
}

// required int32 lane_id = 2;
bool VehicleState::has_lane_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleState::set_has_lane_id() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleState::clear_has_lane_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleState::clear_lane_id() {
  lane_id_ = 0;
  clear_has_lane_id();
}
 ::google::protobuf::int32 VehicleState::lane_id() const {
  // @@protoc_insertion_point(field_get:custom_messages.VehicleState.lane_id)
  return lane_id_;
}
 void VehicleState::set_lane_id(::google::protobuf::int32 value) {
  set_has_lane_id();
  lane_id_ = value;
  // @@protoc_insertion_point(field_set:custom_messages.VehicleState.lane_id)
}

// required .gazebo.msgs.Vector2d position = 3;
bool VehicleState::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleState::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleState::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleState::clear_position() {
  if (position_ != NULL) position_->::gazebo::msgs::Vector2d::Clear();
  clear_has_position();
}
const ::gazebo::msgs::Vector2d& VehicleState::position() const {
  // @@protoc_insertion_point(field_get:custom_messages.VehicleState.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::gazebo::msgs::Vector2d* VehicleState::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::gazebo::msgs::Vector2d;
  }
  // @@protoc_insertion_point(field_mutable:custom_messages.VehicleState.position)
  return position_;
}
::gazebo::msgs::Vector2d* VehicleState::release_position() {
  // @@protoc_insertion_point(field_release:custom_messages.VehicleState.position)
  clear_has_position();
  ::gazebo::msgs::Vector2d* temp = position_;
  position_ = NULL;
  return temp;
}
void VehicleState::set_allocated_position(::gazebo::msgs::Vector2d* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:custom_messages.VehicleState.position)
}

// required .gazebo.msgs.Vector2d velocity = 4;
bool VehicleState::has_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VehicleState::set_has_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
void VehicleState::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleState::clear_velocity() {
  if (velocity_ != NULL) velocity_->::gazebo::msgs::Vector2d::Clear();
  clear_has_velocity();
}
const ::gazebo::msgs::Vector2d& VehicleState::velocity() const {
  // @@protoc_insertion_point(field_get:custom_messages.VehicleState.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
::gazebo::msgs::Vector2d* VehicleState::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::gazebo::msgs::Vector2d;
  }
  // @@protoc_insertion_point(field_mutable:custom_messages.VehicleState.velocity)
  return velocity_;
}
::gazebo::msgs::Vector2d* VehicleState::release_velocity() {
  // @@protoc_insertion_point(field_release:custom_messages.VehicleState.velocity)
  clear_has_velocity();
  ::gazebo::msgs::Vector2d* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void VehicleState::set_allocated_velocity(::gazebo::msgs::Vector2d* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:custom_messages.VehicleState.velocity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorldState::kTimeFieldNumber;
const int WorldState::kSimulationRoundFieldNumber;
const int WorldState::kEgoVehicleFieldNumber;
const int WorldState::kVehiclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorldState::WorldState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:custom_messages.WorldState)
}

void WorldState::InitAsDefaultInstance() {
  time_ = const_cast< ::gazebo::msgs::Time*>(&::gazebo::msgs::Time::default_instance());
  ego_vehicle_ = const_cast< ::custom_messages::VehicleState*>(&::custom_messages::VehicleState::default_instance());
}

WorldState::WorldState(const WorldState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:custom_messages.WorldState)
}

void WorldState::SharedCtor() {
  _cached_size_ = 0;
  time_ = NULL;
  simulation_round_ = 0;
  ego_vehicle_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldState::~WorldState() {
  // @@protoc_insertion_point(destructor:custom_messages.WorldState)
  SharedDtor();
}

void WorldState::SharedDtor() {
  if (this != default_instance_) {
    delete time_;
    delete ego_vehicle_;
  }
}

void WorldState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldState_descriptor_;
}

const WorldState& WorldState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_custom_5fmessages_2eproto();
  return *default_instance_;
}

WorldState* WorldState::default_instance_ = NULL;

WorldState* WorldState::New(::google::protobuf::Arena* arena) const {
  WorldState* n = new WorldState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorldState::Clear() {
// @@protoc_insertion_point(message_clear_start:custom_messages.WorldState)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_time()) {
      if (time_ != NULL) time_->::gazebo::msgs::Time::Clear();
    }
    simulation_round_ = 0;
    if (has_ego_vehicle()) {
      if (ego_vehicle_ != NULL) ego_vehicle_->::custom_messages::VehicleState::Clear();
    }
  }
  vehicles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WorldState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:custom_messages.WorldState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.Time time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_simulation_round;
        break;
      }

      // required int32 simulation_round = 2;
      case 2: {
        if (tag == 16) {
         parse_simulation_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &simulation_round_)));
          set_has_simulation_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ego_vehicle;
        break;
      }

      // required .custom_messages.VehicleState ego_vehicle = 3;
      case 3: {
        if (tag == 26) {
         parse_ego_vehicle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ego_vehicle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vehicles;
        break;
      }

      // repeated .custom_messages.VehicleState vehicles = 4;
      case 4: {
        if (tag == 34) {
         parse_vehicles:
          DO_(input->IncrementRecursionDepth());
         parse_loop_vehicles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_vehicles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_vehicles;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:custom_messages.WorldState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:custom_messages.WorldState)
  return false;
#undef DO_
}

void WorldState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:custom_messages.WorldState)
  // required .gazebo.msgs.Time time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->time_, output);
  }

  // required int32 simulation_round = 2;
  if (has_simulation_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->simulation_round(), output);
  }

  // required .custom_messages.VehicleState ego_vehicle = 3;
  if (has_ego_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ego_vehicle_, output);
  }

  // repeated .custom_messages.VehicleState vehicles = 4;
  for (unsigned int i = 0, n = this->vehicles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vehicles(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:custom_messages.WorldState)
}

::google::protobuf::uint8* WorldState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:custom_messages.WorldState)
  // required .gazebo.msgs.Time time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->time_, false, target);
  }

  // required int32 simulation_round = 2;
  if (has_simulation_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->simulation_round(), target);
  }

  // required .custom_messages.VehicleState ego_vehicle = 3;
  if (has_ego_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->ego_vehicle_, false, target);
  }

  // repeated .custom_messages.VehicleState vehicles = 4;
  for (unsigned int i = 0, n = this->vehicles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->vehicles(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:custom_messages.WorldState)
  return target;
}

int WorldState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:custom_messages.WorldState)
  int total_size = 0;

  if (has_time()) {
    // required .gazebo.msgs.Time time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_);
  }

  if (has_simulation_round()) {
    // required int32 simulation_round = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->simulation_round());
  }

  if (has_ego_vehicle()) {
    // required .custom_messages.VehicleState ego_vehicle = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ego_vehicle_);
  }

  return total_size;
}
int WorldState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:custom_messages.WorldState)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Time time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_);

    // required int32 simulation_round = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->simulation_round());

    // required .custom_messages.VehicleState ego_vehicle = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ego_vehicle_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .custom_messages.VehicleState vehicles = 4;
  total_size += 1 * this->vehicles_size();
  for (int i = 0; i < this->vehicles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vehicles(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:custom_messages.WorldState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WorldState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WorldState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:custom_messages.WorldState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:custom_messages.WorldState)
    MergeFrom(*source);
  }
}

void WorldState::MergeFrom(const WorldState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:custom_messages.WorldState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  vehicles_.MergeFrom(from.vehicles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      mutable_time()->::gazebo::msgs::Time::MergeFrom(from.time());
    }
    if (from.has_simulation_round()) {
      set_simulation_round(from.simulation_round());
    }
    if (from.has_ego_vehicle()) {
      mutable_ego_vehicle()->::custom_messages::VehicleState::MergeFrom(from.ego_vehicle());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WorldState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:custom_messages.WorldState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldState::CopyFrom(const WorldState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:custom_messages.WorldState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_time()) {
    if (!this->time_->IsInitialized()) return false;
  }
  if (has_ego_vehicle()) {
    if (!this->ego_vehicle_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->vehicles())) return false;
  return true;
}

void WorldState::Swap(WorldState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorldState::InternalSwap(WorldState* other) {
  std::swap(time_, other->time_);
  std::swap(simulation_round_, other->simulation_round_);
  std::swap(ego_vehicle_, other->ego_vehicle_);
  vehicles_.UnsafeArenaSwap(&other->vehicles_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorldState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldState_descriptor_;
  metadata.reflection = WorldState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorldState

// required .gazebo.msgs.Time time = 1;
bool WorldState::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WorldState::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
void WorldState::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void WorldState::clear_time() {
  if (time_ != NULL) time_->::gazebo::msgs::Time::Clear();
  clear_has_time();
}
const ::gazebo::msgs::Time& WorldState::time() const {
  // @@protoc_insertion_point(field_get:custom_messages.WorldState.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
::gazebo::msgs::Time* WorldState::mutable_time() {
  set_has_time();
  if (time_ == NULL) {
    time_ = new ::gazebo::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:custom_messages.WorldState.time)
  return time_;
}
::gazebo::msgs::Time* WorldState::release_time() {
  // @@protoc_insertion_point(field_release:custom_messages.WorldState.time)
  clear_has_time();
  ::gazebo::msgs::Time* temp = time_;
  time_ = NULL;
  return temp;
}
void WorldState::set_allocated_time(::gazebo::msgs::Time* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:custom_messages.WorldState.time)
}

// required int32 simulation_round = 2;
bool WorldState::has_simulation_round() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WorldState::set_has_simulation_round() {
  _has_bits_[0] |= 0x00000002u;
}
void WorldState::clear_has_simulation_round() {
  _has_bits_[0] &= ~0x00000002u;
}
void WorldState::clear_simulation_round() {
  simulation_round_ = 0;
  clear_has_simulation_round();
}
 ::google::protobuf::int32 WorldState::simulation_round() const {
  // @@protoc_insertion_point(field_get:custom_messages.WorldState.simulation_round)
  return simulation_round_;
}
 void WorldState::set_simulation_round(::google::protobuf::int32 value) {
  set_has_simulation_round();
  simulation_round_ = value;
  // @@protoc_insertion_point(field_set:custom_messages.WorldState.simulation_round)
}

// required .custom_messages.VehicleState ego_vehicle = 3;
bool WorldState::has_ego_vehicle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WorldState::set_has_ego_vehicle() {
  _has_bits_[0] |= 0x00000004u;
}
void WorldState::clear_has_ego_vehicle() {
  _has_bits_[0] &= ~0x00000004u;
}
void WorldState::clear_ego_vehicle() {
  if (ego_vehicle_ != NULL) ego_vehicle_->::custom_messages::VehicleState::Clear();
  clear_has_ego_vehicle();
}
const ::custom_messages::VehicleState& WorldState::ego_vehicle() const {
  // @@protoc_insertion_point(field_get:custom_messages.WorldState.ego_vehicle)
  return ego_vehicle_ != NULL ? *ego_vehicle_ : *default_instance_->ego_vehicle_;
}
::custom_messages::VehicleState* WorldState::mutable_ego_vehicle() {
  set_has_ego_vehicle();
  if (ego_vehicle_ == NULL) {
    ego_vehicle_ = new ::custom_messages::VehicleState;
  }
  // @@protoc_insertion_point(field_mutable:custom_messages.WorldState.ego_vehicle)
  return ego_vehicle_;
}
::custom_messages::VehicleState* WorldState::release_ego_vehicle() {
  // @@protoc_insertion_point(field_release:custom_messages.WorldState.ego_vehicle)
  clear_has_ego_vehicle();
  ::custom_messages::VehicleState* temp = ego_vehicle_;
  ego_vehicle_ = NULL;
  return temp;
}
void WorldState::set_allocated_ego_vehicle(::custom_messages::VehicleState* ego_vehicle) {
  delete ego_vehicle_;
  ego_vehicle_ = ego_vehicle;
  if (ego_vehicle) {
    set_has_ego_vehicle();
  } else {
    clear_has_ego_vehicle();
  }
  // @@protoc_insertion_point(field_set_allocated:custom_messages.WorldState.ego_vehicle)
}

// repeated .custom_messages.VehicleState vehicles = 4;
int WorldState::vehicles_size() const {
  return vehicles_.size();
}
void WorldState::clear_vehicles() {
  vehicles_.Clear();
}
const ::custom_messages::VehicleState& WorldState::vehicles(int index) const {
  // @@protoc_insertion_point(field_get:custom_messages.WorldState.vehicles)
  return vehicles_.Get(index);
}
::custom_messages::VehicleState* WorldState::mutable_vehicles(int index) {
  // @@protoc_insertion_point(field_mutable:custom_messages.WorldState.vehicles)
  return vehicles_.Mutable(index);
}
::custom_messages::VehicleState* WorldState::add_vehicles() {
  // @@protoc_insertion_point(field_add:custom_messages.WorldState.vehicles)
  return vehicles_.Add();
}
::google::protobuf::RepeatedPtrField< ::custom_messages::VehicleState >*
WorldState::mutable_vehicles() {
  // @@protoc_insertion_point(field_mutable_list:custom_messages.WorldState.vehicles)
  return &vehicles_;
}
const ::google::protobuf::RepeatedPtrField< ::custom_messages::VehicleState >&
WorldState::vehicles() const {
  // @@protoc_insertion_point(field_list:custom_messages.WorldState.vehicles)
  return vehicles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kSimulationRoundFieldNumber;
const int Command::kEgoCarSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:custom_messages.Command)
}

void Command::InitAsDefaultInstance() {
}

Command::Command(const Command& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:custom_messages.Command)
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  simulation_round_ = 0;
  ego_car_speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:custom_messages.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_custom_5fmessages_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New(::google::protobuf::Arena* arena) const {
  Command* n = new Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:custom_messages.Command)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Command, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Command*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ego_car_speed_, simulation_round_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:custom_messages.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 simulation_round = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &simulation_round_)));
          set_has_simulation_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_ego_car_speed;
        break;
      }

      // required double ego_car_speed = 2;
      case 2: {
        if (tag == 17) {
         parse_ego_car_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ego_car_speed_)));
          set_has_ego_car_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:custom_messages.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:custom_messages.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:custom_messages.Command)
  // required int32 simulation_round = 1;
  if (has_simulation_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->simulation_round(), output);
  }

  // required double ego_car_speed = 2;
  if (has_ego_car_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ego_car_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:custom_messages.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:custom_messages.Command)
  // required int32 simulation_round = 1;
  if (has_simulation_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->simulation_round(), target);
  }

  // required double ego_car_speed = 2;
  if (has_ego_car_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ego_car_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:custom_messages.Command)
  return target;
}

int Command::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:custom_messages.Command)
  int total_size = 0;

  if (has_simulation_round()) {
    // required int32 simulation_round = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->simulation_round());
  }

  if (has_ego_car_speed()) {
    // required double ego_car_speed = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
int Command::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:custom_messages.Command)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 simulation_round = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->simulation_round());

    // required double ego_car_speed = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:custom_messages.Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Command* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:custom_messages.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:custom_messages.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:custom_messages.Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_simulation_round()) {
      set_simulation_round(from.simulation_round());
    }
    if (from.has_ego_car_speed()) {
      set_ego_car_speed(from.ego_car_speed());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:custom_messages.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:custom_messages.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  std::swap(simulation_round_, other->simulation_round_);
  std::swap(ego_car_speed_, other->ego_car_speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Command

// required int32 simulation_round = 1;
bool Command::has_simulation_round() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Command::set_has_simulation_round() {
  _has_bits_[0] |= 0x00000001u;
}
void Command::clear_has_simulation_round() {
  _has_bits_[0] &= ~0x00000001u;
}
void Command::clear_simulation_round() {
  simulation_round_ = 0;
  clear_has_simulation_round();
}
 ::google::protobuf::int32 Command::simulation_round() const {
  // @@protoc_insertion_point(field_get:custom_messages.Command.simulation_round)
  return simulation_round_;
}
 void Command::set_simulation_round(::google::protobuf::int32 value) {
  set_has_simulation_round();
  simulation_round_ = value;
  // @@protoc_insertion_point(field_set:custom_messages.Command.simulation_round)
}

// required double ego_car_speed = 2;
bool Command::has_ego_car_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Command::set_has_ego_car_speed() {
  _has_bits_[0] |= 0x00000002u;
}
void Command::clear_has_ego_car_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
void Command::clear_ego_car_speed() {
  ego_car_speed_ = 0;
  clear_has_ego_car_speed();
}
 double Command::ego_car_speed() const {
  // @@protoc_insertion_point(field_get:custom_messages.Command.ego_car_speed)
  return ego_car_speed_;
}
 void Command::set_ego_car_speed(double value) {
  set_has_ego_car_speed();
  ego_car_speed_ = value;
  // @@protoc_insertion_point(field_set:custom_messages.Command.ego_car_speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Statistics::kTotalAccelerationFieldNumber;
const int Statistics::kSimulationTimeStepsTakenFieldNumber;
const int Statistics::kSuccessFieldNumber;
const int Statistics::kCollisionDetectedFieldNumber;
const int Statistics::kLimitsRespectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Statistics::Statistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:custom_messages.Statistics)
}

void Statistics::InitAsDefaultInstance() {
}

Statistics::Statistics(const Statistics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:custom_messages.Statistics)
}

void Statistics::SharedCtor() {
  _cached_size_ = 0;
  total_acceleration_ = 0;
  simulation_time_steps_taken_ = 0;
  success_ = false;
  collision_detected_ = false;
  limits_respected_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Statistics::~Statistics() {
  // @@protoc_insertion_point(destructor:custom_messages.Statistics)
  SharedDtor();
}

void Statistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Statistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Statistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Statistics_descriptor_;
}

const Statistics& Statistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_custom_5fmessages_2eproto();
  return *default_instance_;
}

Statistics* Statistics::default_instance_ = NULL;

Statistics* Statistics::New(::google::protobuf::Arena* arena) const {
  Statistics* n = new Statistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:custom_messages.Statistics)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Statistics, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Statistics*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(total_acceleration_, limits_respected_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Statistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:custom_messages.Statistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double total_acceleration = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_acceleration_)));
          set_has_total_acceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_simulation_time_steps_taken;
        break;
      }

      // required int32 simulation_time_steps_taken = 2;
      case 2: {
        if (tag == 16) {
         parse_simulation_time_steps_taken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &simulation_time_steps_taken_)));
          set_has_simulation_time_steps_taken();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_success;
        break;
      }

      // required bool success = 3;
      case 3: {
        if (tag == 24) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_collision_detected;
        break;
      }

      // required bool collision_detected = 4;
      case 4: {
        if (tag == 32) {
         parse_collision_detected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collision_detected_)));
          set_has_collision_detected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_limits_respected;
        break;
      }

      // required bool limits_respected = 5;
      case 5: {
        if (tag == 40) {
         parse_limits_respected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &limits_respected_)));
          set_has_limits_respected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:custom_messages.Statistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:custom_messages.Statistics)
  return false;
#undef DO_
}

void Statistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:custom_messages.Statistics)
  // required double total_acceleration = 1;
  if (has_total_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_acceleration(), output);
  }

  // required int32 simulation_time_steps_taken = 2;
  if (has_simulation_time_steps_taken()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->simulation_time_steps_taken(), output);
  }

  // required bool success = 3;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->success(), output);
  }

  // required bool collision_detected = 4;
  if (has_collision_detected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->collision_detected(), output);
  }

  // required bool limits_respected = 5;
  if (has_limits_respected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->limits_respected(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:custom_messages.Statistics)
}

::google::protobuf::uint8* Statistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:custom_messages.Statistics)
  // required double total_acceleration = 1;
  if (has_total_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_acceleration(), target);
  }

  // required int32 simulation_time_steps_taken = 2;
  if (has_simulation_time_steps_taken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->simulation_time_steps_taken(), target);
  }

  // required bool success = 3;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->success(), target);
  }

  // required bool collision_detected = 4;
  if (has_collision_detected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->collision_detected(), target);
  }

  // required bool limits_respected = 5;
  if (has_limits_respected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->limits_respected(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:custom_messages.Statistics)
  return target;
}

int Statistics::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:custom_messages.Statistics)
  int total_size = 0;

  if (has_total_acceleration()) {
    // required double total_acceleration = 1;
    total_size += 1 + 8;
  }

  if (has_simulation_time_steps_taken()) {
    // required int32 simulation_time_steps_taken = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->simulation_time_steps_taken());
  }

  if (has_success()) {
    // required bool success = 3;
    total_size += 1 + 1;
  }

  if (has_collision_detected()) {
    // required bool collision_detected = 4;
    total_size += 1 + 1;
  }

  if (has_limits_respected()) {
    // required bool limits_respected = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
int Statistics::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:custom_messages.Statistics)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required double total_acceleration = 1;
    total_size += 1 + 8;

    // required int32 simulation_time_steps_taken = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->simulation_time_steps_taken());

    // required bool success = 3;
    total_size += 1 + 1;

    // required bool collision_detected = 4;
    total_size += 1 + 1;

    // required bool limits_respected = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Statistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:custom_messages.Statistics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Statistics* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Statistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:custom_messages.Statistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:custom_messages.Statistics)
    MergeFrom(*source);
  }
}

void Statistics::MergeFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:custom_messages.Statistics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_acceleration()) {
      set_total_acceleration(from.total_acceleration());
    }
    if (from.has_simulation_time_steps_taken()) {
      set_simulation_time_steps_taken(from.simulation_time_steps_taken());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_collision_detected()) {
      set_collision_detected(from.collision_detected());
    }
    if (from.has_limits_respected()) {
      set_limits_respected(from.limits_respected());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Statistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:custom_messages.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Statistics::CopyFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:custom_messages.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistics::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Statistics::Swap(Statistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Statistics::InternalSwap(Statistics* other) {
  std::swap(total_acceleration_, other->total_acceleration_);
  std::swap(simulation_time_steps_taken_, other->simulation_time_steps_taken_);
  std::swap(success_, other->success_);
  std::swap(collision_detected_, other->collision_detected_);
  std::swap(limits_respected_, other->limits_respected_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Statistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Statistics_descriptor_;
  metadata.reflection = Statistics_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Statistics

// required double total_acceleration = 1;
bool Statistics::has_total_acceleration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Statistics::set_has_total_acceleration() {
  _has_bits_[0] |= 0x00000001u;
}
void Statistics::clear_has_total_acceleration() {
  _has_bits_[0] &= ~0x00000001u;
}
void Statistics::clear_total_acceleration() {
  total_acceleration_ = 0;
  clear_has_total_acceleration();
}
 double Statistics::total_acceleration() const {
  // @@protoc_insertion_point(field_get:custom_messages.Statistics.total_acceleration)
  return total_acceleration_;
}
 void Statistics::set_total_acceleration(double value) {
  set_has_total_acceleration();
  total_acceleration_ = value;
  // @@protoc_insertion_point(field_set:custom_messages.Statistics.total_acceleration)
}

// required int32 simulation_time_steps_taken = 2;
bool Statistics::has_simulation_time_steps_taken() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Statistics::set_has_simulation_time_steps_taken() {
  _has_bits_[0] |= 0x00000002u;
}
void Statistics::clear_has_simulation_time_steps_taken() {
  _has_bits_[0] &= ~0x00000002u;
}
void Statistics::clear_simulation_time_steps_taken() {
  simulation_time_steps_taken_ = 0;
  clear_has_simulation_time_steps_taken();
}
 ::google::protobuf::int32 Statistics::simulation_time_steps_taken() const {
  // @@protoc_insertion_point(field_get:custom_messages.Statistics.simulation_time_steps_taken)
  return simulation_time_steps_taken_;
}
 void Statistics::set_simulation_time_steps_taken(::google::protobuf::int32 value) {
  set_has_simulation_time_steps_taken();
  simulation_time_steps_taken_ = value;
  // @@protoc_insertion_point(field_set:custom_messages.Statistics.simulation_time_steps_taken)
}

// required bool success = 3;
bool Statistics::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Statistics::set_has_success() {
  _has_bits_[0] |= 0x00000004u;
}
void Statistics::clear_has_success() {
  _has_bits_[0] &= ~0x00000004u;
}
void Statistics::clear_success() {
  success_ = false;
  clear_has_success();
}
 bool Statistics::success() const {
  // @@protoc_insertion_point(field_get:custom_messages.Statistics.success)
  return success_;
}
 void Statistics::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:custom_messages.Statistics.success)
}

// required bool collision_detected = 4;
bool Statistics::has_collision_detected() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Statistics::set_has_collision_detected() {
  _has_bits_[0] |= 0x00000008u;
}
void Statistics::clear_has_collision_detected() {
  _has_bits_[0] &= ~0x00000008u;
}
void Statistics::clear_collision_detected() {
  collision_detected_ = false;
  clear_has_collision_detected();
}
 bool Statistics::collision_detected() const {
  // @@protoc_insertion_point(field_get:custom_messages.Statistics.collision_detected)
  return collision_detected_;
}
 void Statistics::set_collision_detected(bool value) {
  set_has_collision_detected();
  collision_detected_ = value;
  // @@protoc_insertion_point(field_set:custom_messages.Statistics.collision_detected)
}

// required bool limits_respected = 5;
bool Statistics::has_limits_respected() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Statistics::set_has_limits_respected() {
  _has_bits_[0] |= 0x00000010u;
}
void Statistics::clear_has_limits_respected() {
  _has_bits_[0] &= ~0x00000010u;
}
void Statistics::clear_limits_respected() {
  limits_respected_ = false;
  clear_has_limits_respected();
}
 bool Statistics::limits_respected() const {
  // @@protoc_insertion_point(field_get:custom_messages.Statistics.limits_respected)
  return limits_respected_;
}
 void Statistics::set_limits_respected(bool value) {
  set_has_limits_respected();
  limits_respected_ = value;
  // @@protoc_insertion_point(field_set:custom_messages.Statistics.limits_respected)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace custom_messages

// @@protoc_insertion_point(global_scope)
